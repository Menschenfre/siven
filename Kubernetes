-Instalar vmware
-Instalar ubuntu
-Instalar VIM (editor de texto)
sudo apt install vim
-Instalar CURL
sudo apt install curl
-Instalar BREW
sudo apt install linuxbrew-wrapper
-Dar permisos root a tu usuario por defecto
sudo vim /etc/sudoers
Linea a agregar: $usuario    ALL=(ALL=ALL) ALL
**Refrescar consola o cerrar**

-Instalar kubernetes usando los paquetes nativos de linux, ejecutar las siguientes lineas:
sudo apt-get update && sudo apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

-Instalar minikube
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
  && chmod +x minikube

-Disponibilizar comando minikube:
sudo cp minikube /usr/local/bin && rm minikube

-Instalar Docker:
sudo apt-get update \
&& sudo apt-get install -qy docker.io

-Iniciar minikube **Importante dejar el driver en none, esto solo para máquinas virtuales**
sudo minikube start --vm-driver=none

**Las configutaciones de kubectl y minikube se alojan en /home/$user, para usarlas con el usuario no root se configura
lo siguiente:

sudo mv /root/.kube $HOME/.kube
sudo chown -R $USER $HOME/.kube
sudo chgrp -R $USER $HOME/.kube
sudo mv /root/.minikube $HOME/.minikube
sudo chown -R $USER $HOME/.minikube
sudo chgrp -R $USER $HOME/.minikube

-----------------------------------------------------

-Creando deploy de prueba y levantando pod **HTTP Server de prueba que se expondrá en el puerto 8080**

kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10

-Exponemos el deployment para tener acceso en el puerto 8080, esperar que el pod quede running
kubectl expose deployment hello-minikube --type=NodePort --port=8080

-Obtenemos la url del servicio expuesto anteriormente(si no muestra nada volver a ejecutar los comandos de permisos anteriores).

minikube service hello-minikube --url




-----Jenkins en un pod (Utilidad?)-----

Guia principal:
https://sybrenbolandit.nl/2018/11/23/jenkins-on-minikube/

-Descargar configuracion repo minikube
https://github.com/sybrenbolandit/minikube-jenkins

-Esquema básico del yaml para la creación de un nuevo namespace:

apiVersion: v1
kind: Namespace
metadata:
  name: sybrenbolandit

-Comando a ejecutar tomando el yaml del repo descrito anteriormente para la creación del namespace:
kubectl create -f jenkins-namespace.yaml  

-Crear el volumen persistente para el namespace, esquema básico del yml:

apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv
  namespace: sybrenbolandit
spec:
  storageClassName: jenkins-pv
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 20Gi
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data/jenkins-volume/

-Ejecutamos el siguiente comando, tomando como referencia el yaml anterior del repo:
kubectl create -f jenkins-volume.yaml    

-Instalamos Helm proceso binario:
https://helm.sh/docs/intro/install/

-Dentro del repo nos posicionamos en la carpeta helm, iniciamos helm:

helm init

-Agregamos el repo de helm:
helm repo add stable https://kubernetes-charts.storage.googleapis.com

-Actualizamos el repo de helm:
helm repo update


-Siempre dentro de la carpeta helm, configuraremos jenkins con los valores entregados por el yaml, ejecutamos (Se demora en levantar, debe descargar la imagen):

helm install jenkins -f jenkins-values.yaml stable/jenkins --namespace sybrenbolandit --version 0.22.0

-Obtenemos la clave secreta para iniciar jenkins:
printf $(kubectl get secret --namespace sybrenbolandit jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo


-Ingresamos al puerto establecido en el yaml "32000":
http://localhost:32000/login

Usuario: admin
Clave obtenida anteriormente:
4P2VbuRjkC

----Instalar Jenkins----

Instalación java
https://www.digitalocean.com/community/tutorials/como-instalar-java-con-apt-en-ubuntu-18-04-es

JRE:
sudo apt install default-jre

JDK:
sudo apt install default-jdk


----Comandos básicos administración kubectl *Tomando como ejemplo el nombre del pod "hello-minikube-797f975945-rf662", este se aloja en el namespace por default *------

*Obtiene el log del pod
kubectl logs hello-minikube-797f975945-rf662

*Obtiene los nodos disponibles, en este caso solo hay uno 
kubectl get nodes

*Obtiene los pods disponibles dentro del nodo y namespace "default"
kubectl get pods

*Obtiene los pods dentro de un determinado namespace
kubectl get pods --namespace sybrenbolandit

*Obtiene el log del pod dentro de un determinado namespace
kubectl logs jenkins-56f55488f4-hwkgf --namespace sybrenbolandit


*Obtiene los pods de todos los namespace
kubectl get pods --all-namespaces

*Obtiene los namespace existentes en el nodo
kubectl get ns

*Borra el servicio
kubectl delete services hello-minikube

*Borra el deployment
kubectl delete deployment hello-minikube



--Comandos básicos minikube--

*Detiene el cluster local
minikube stop

*Borra el cluster local
minikube delete

*Activa el dashboard, interfaz visual de minikube
sudo minikube dashboard

-----Comandos jenkins-----
*Cambiar el usuario por defecto para que se utilice el usuario en la máquina
http://blog.manula.org/2013/03/running-jenkins-under-different-user-in.html
https://medium.com/fusionqa/how-to-run-jenkins-using-the-root-user-in-linux-centos-79d96749ca5a
*Restart Jenkins
/etc/init.d/jenkins restart





------Java--------
Creando un ms:
https://www.javatpoint.com/creating-a-simple-microservice


----Gradle project-----
https://spring.io/guides/gs/gradle/#initial




------Deploy ms, seguir ------
https://www.oreilly.com/content/how-to-manage-docker-containers-in-kubernetes-with-java/





kubeadm join 192.168.100.6:6443 --token 06tl4c.oqn35jzecidg0r0m --discovery-token-ca-cert-hash sha256:c40f5fa0aba6ba311efcdb0e8cb637ae0eb8ce27b7a03d47be6d966142f2204c


