-Instalar vmware
-Instalar ubuntu
-Instalar VIM (editor de texto)
sudo apt install vim

-Instalar CURL
sudo apt install curl

-Instalar BREW
sudo apt install linuxbrew-wrapper
-Dar permisos root a tu usuario por defecto
sudo vim /etc/sudoers
Linea a agregar: $usuario    ALL=(ALL=ALL) ALL
Linea a agregar: %root    ALL= NOPASSWD: ALL
-Agregar usuario a grupo de admin:
sudo usermod -a -G sudo master

**Refrescar consola o cerrar**

-Instalar Docker:
sudo apt-get update \
&& sudo apt-get install -qy docker.io

-Instalar kubernetes usando los paquetes nativos de linux, ejecutar las siguientes lineas:
sudo apt-get update && sudo apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubectl

-Instalar minikube
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
  && chmod +x minikube

-Disponibilizar comando minikube:
sudo cp minikube /usr/local/bin && rm minikube

-Instalar driver 
sudo apt install qemu-kvm libvirt-bin
-Agrgar usuario al driver
sudo adduser $USER libvirt


-Iniciar minikube **Importante dejar el driver en none, esto solo para máquinas virtuales (Si no, usar --vm-driver=kvm2**
minikube start --vm-driver=none
-----------------------------------------------------

----Instalar Jenkins por linea de comando----

Instalación java
https://www.digitalocean.com/community/tutorials/como-instalar-java-con-apt-en-ubuntu-18-04-es

JRE:
sudo apt install default-jre

JDK:
sudo apt install default-jdk

Agregamos la llave de jenkins:
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -

Agregamos la siguiente linea a /etc/apt/sources.list:
deb https://pkg.jenkins.io/debian binary/

Ejecutamos:
sudo apt-get update
sudo apt-get install jenkins
------------------------------------------------------



-Creando deploy de prueba y levantando pod **HTTP Server de prueba que se expondrá en el puerto 8080**

kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10

-Exponemos el deployment para tener acceso en el puerto 8080, esperar que el pod quede running
kubectl expose deployment hello-minikube --type=NodePort --port=8080

-Obtenemos la url del servicio expuesto anteriormente(si no muestra nada volver a ejecutar los comandos de permisos anteriores).

minikube service hello-minikube --url




-----Jenkins en un pod (Utilidad?)-----

Guia principal:
https://sybrenbolandit.nl/2018/11/23/jenkins-on-minikube/

-Descargar configuracion repo minikube
https://github.com/sybrenbolandit/minikube-jenkins

-Esquema básico del yaml para la creación de un nuevo namespace:

apiVersion: v1
kind: Namespace
metadata:
  name: sybrenbolandit

-Comando a ejecutar tomando el yaml del repo descrito anteriormente para la creación del namespace:
kubectl create -f jenkins-namespace.yaml  

-Crear el volumen persistente para el namespace, esquema básico del yml:

apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv
  namespace: sybrenbolandit
spec:
  storageClassName: jenkins-pv
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 20Gi
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data/jenkins-volume/

-Ejecutamos el siguiente comando, tomando como referencia el yaml anterior del repo:
kubectl create -f jenkins-volume.yaml    

-Instalamos Helm proceso binario:
https://helm.sh/docs/intro/install/

-Dentro del repo nos posicionamos en la carpeta helm, iniciamos helm:

helm init

-Agregamos el repo de helm:
helm repo add stable https://kubernetes-charts.storage.googleapis.com

-Actualizamos el repo de helm:
helm repo update


-Siempre dentro de la carpeta helm, configuraremos jenkins con los valores entregados por el yaml, ejecutamos (Se demora en levantar, debe descargar la imagen):

helm install jenkins -f jenkins-values.yaml stable/jenkins --namespace sybrenbolandit --version 0.22.0

-Obtenemos la clave secreta para iniciar jenkins:
printf $(kubectl get secret --namespace sybrenbolandit jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo


-Ingresamos al puerto establecido en el yaml "32000":
http://localhost:32000/login

Usuario: admin
Clave obtenida anteriormente:
4P2VbuRjkC



----Comandos básicos administración kubectl *Tomando como ejemplo el nombre del pod "hello-minikube-797f975945-rf662", este se aloja en el namespace por default *------

*Obtiene el log del pod
kubectl logs hello-minikube-797f975945-rf662

*Obtiene los nodos disponibles, en este caso solo hay uno 
kubectl get nodes

*Obtiene los pods disponibles dentro del nodo y namespace "default"
kubectl get pods

*Obtiene los pods dentro de un determinado namespace
kubectl get pods --namespace sybrenbolandit

*Obtiene el log del pod dentro de un determinado namespace
kubectl logs jenkins-56f55488f4-hwkgf --namespace sybrenbolandit


*Obtiene los pods de todos los namespace
kubectl get pods --all-namespaces

*Obtiene los namespace existentes en el nodo
kubectl get ns

*Borra el servicio
kubectl delete services hello-minikube

*Borra el deployment
kubectl delete deployment hello-minikube

*Lista todos los services
kubectl get svc

*reiniciar pod
kubectl -n ic delete pod/shopfront-hpn2c



--Comandos básicos minikube--

*Detiene el cluster local
minikube stop

*Borra el cluster local
minikube delete

*Activa el dashboard, interfaz visual de minikube
sudo minikube dashboard

-----Comandos jenkins-----
*Cambiar el usuario por defecto para que se utilice el usuario en la máquina
http://blog.manula.org/2013/03/running-jenkins-under-different-user-in.html
https://medium.com/fusionqa/how-to-run-jenkins-using-the-root-user-in-linux-centos-79d96749ca5a

*Restart Jenkins
/etc/init.d/jenkins restart
/etc/init.d/jenkins {start|stop|status|restart|force-reload}


------Comandos Docker------
*Listar imagenes
sudo docker images

*Borrar imagenes
sudo docker rmi sieven/ms-shop-neg:develop





------Java--------
Creando un ms:
https://www.javatpoint.com/creating-a-simple-microservice


----Gradle project-----
https://spring.io/guides/gs/gradle/#initial




------Deploy ms, seguir ------
https://www.oreilly.com/content/how-to-manage-docker-containers-in-kubernetes-with-java/

Error push docker a dockerhub:
https://stackoverflow.com/questions/41984399/denied-requested-access-to-the-resource-is-denied-docker


------GIT ------
*Remover ultimo commit
git reset --hard HEAD^

*Pushear force
git push origin HEAD --force



---Registry con docker, kubernetes(minikube)
https://hasura.io/blog/sharing-a-local-registry-for-minikube-37c7240d0615/

https://docs.docker.com/registry/deploying/

https://blog.irontec.com/montando-un-docker-registry-como-dios-manda/

https://docs.docker.com/registry/


sudo docker tag sieven/ms-shop-neg:develop localhost:5000/ms-shop-neg-develop

sudo docker push localhost:5000/ms-shop-neg-develop

http://localhost:5000/v2/_catalog
*Tags registry
http://localhost:5000/v2/ms-shop-neg/tags/list

*Detener registry
docker container stop registry

*Levantar registry con ruta especifica
sudo docker run -d -p 5000:5000 --restart=always --name registry -v /mnt/registry:/var/lib/registry registry:2

---REGISTRY NOTES----
curl -v --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -X GET http://localhost:5000/v2/ms-shop-neg/manifests/master 2>&1 | grep Docker-Content-Digest | awk '{print ($3)}'




curl -v --silent -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -X DELETE http://localhost:5000/v2/ms-shop-neg/manifests/sha256:5b1669470b3c5f78c1fe8c10f6b2145e678e1081fd11dde2e146e15a0ac5a29d



sudo docker run -d -p 5000:5000 --restart=always --name registry -v /mnt/registry:/var/lib/registry registry:2





---WORDPRESS ON KUBERNETES---
https://kubernetes.io/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/



---PHP----

sudo docker build -t sieven/laravel-kubernetes-demo:develop .
sudo docker run -ti   -p 9090:80   -e APP_KEY=base64:cUPmwHx4LXa4Z25HhzFiWCf7TlQmSqnt98pnuiHmzgY=  sieven/php-normal:master


https://www.cloudbooklet.com/kubernetes-basic-php-application-with-nginx-on-google-cloud/
https://learnk8s.io/blog/kubernetes-deploy-laravel-the-easy-way
https://github.com/mochizukikotaro/k8s-php-apache-mysql
http://blog.adnansiddiqi.me/getting-started-with-docker/
http://blog.adnansiddiqi.me/create-your-first-php-mysql-application-in-docker/
https://medium.com/faun/deploy-your-first-scaleable-php-mysql-web-application-in-kubernetes-33ed7ab66595

---Ingress----
https://www.alibabacloud.com/blog/routing-applications-in-kubernetes-with-nginx-ingress_594719 (automatización)

2740b50fb236


---MYSQL ON KUBERNETES---

https://www.serverlab.ca/tutorials/containers/kubernetes/how-to-deploy-mysql-server-5-7-to-kubernetes/
**Altos tutoriales de todo**
https://www.serverlab.ca/category/tutorials/containers/

--PHP my admin on kubernetes--
https://www.serverlab.ca/tutorials/containers/kubernetes/deploy-phpmyadmin-to-kubernetes-to-manage-mysql-pods/

--volumen persistente
https://www.serverlab.ca/tutorials/containers/kubernetes/how-to-run-wordpress-and-mysql-5-7-on-kubernetes/
echo "super-secret-mysql-password" | base64


kubeadm join 192.168.100.6:6443 --token 06tl4c.oqn35jzecidg0r0m --discovery-token-ca-cert-hash sha256:c40f5fa0aba6ba311efcdb0e8cb637ae0eb8ce27b7a03d47be6d966142f2204c

--------MINIKUBE--------
*Ver imagenes docker dentro de la maquina
minikube ssh

*Info
https://stackoverflow.com/questions/52983049/why-does-docker-ps-not-show-my-minikubes-docker-containers

--------PORT-FORWADING------

https://kubernetes.io/docs/tasks/access-application-cluster/port-forward-access-application-cluster/
*
kubectl port-forward svc/phpmyadmin-service-5-7 8081:80 --namespace ic &

kubectl port-forward --address 0.0.0.0 --pod-running-timeout=5m0s svc/myblog-wordpress-service 8082:80 --namespace ic & 
kubectl port-forward --address 0.0.0.0 --pod-running-timeout=5m0s svc/phpmyadmin-service-5-7 8081:80 --namespace ic & 

kubectl proxy --address='0.0.0.0' --disable-filter=true &



-----BLOG CON VARIOS TEMAS-----
https://www.returngis.net/2019/04/acceder-a-tus-aplicaciones-en-kubernetes-a-traves-de-ingress/


----Check ports-----

https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/



---- COmmands ----

docker scp -r 75121a07a0d2:/var/www/html/images filipebrandao@filipecebr.dyndns.org:/Users/filipebrandao/Desktop




ssh -i ${PATH_SSH_MINIKUBE} docker@${IP_MINIKUBE}


traspaso de archivos desde el contenedor
kubectl cp ic/wiki-deployment-master-66b6c8b646-5z2p8:/var/www/html/images /Users/filipebrandao/Desktop

obtener nombre del pod
kubectl get pods -l app=wiki-master -o custom-columns=:metadata.name --namespace ic

matar proceso si es que:
sudo lsof -i :8082
kill -9 






-------------- SOlución vim sudo
Open two ssh sessions to the target server.
In the first session, get the PID of bash by running:

echo $$

In the second session, start the authentication agent with:

pkttyagent --process (pid from step 2)

Back in the first session, run:

pkexec visudo

In the second session, you will get the password prompt. visudo will start in the first session.


-----Ejecutar comando dentro de contenedor-----
docker exec -it 7ef7990e1103 bash -c "echo 'max_allowed_packet = 512M' >> /etc/mysql/mysql.conf.d/mysqld.cnf"


--PIPE RANCHER
https://hub.docker.com/r/rancher/rancher